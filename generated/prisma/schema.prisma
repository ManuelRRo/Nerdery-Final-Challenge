// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Roles {
  id    String      @id @default(uuid())
  name  String
  users UserRoles[]
}

model Users {
  id         String      @id @default(uuid())
  nickname   String
  first_name String
  last_name  String
  email      String      @unique
  password   String
  roles      UserRoles[]
  orders     Orders[]
  likes      Likes[]
  carts      Carts[]
}

model UserRoles {
  users  Users  @relation(fields: [userId], references: [id])
  userId String // relation scalar field (used in the `@relation` attribute above)
  roles  Roles  @relation(fields: [roleId], references: [id])
  roleId String

  @@id([userId, roleId])
}

model Orders {
  id           String         @id @default(uuid())
  created_at   DateTime       @default(now())
  user         Users          @relation(fields: [user_id], references: [id])
  user_id      String
  orderDetails OrderDetails[]
  payment      Payments?
}

model Payments {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  status         String
  amount         Float
  currency       String
  receipt_url    String
  payment_intent String   @unique
  order          Orders   @relation(fields: [orderId], references: [id])
  orderId        String   @unique
}

model OrderDetails {
  id              String   @id @default(uuid())
  quantity        Int
  price           Float
  orderDetails    Orders   @relation(fields: [orderDetails_id], references: [id])
  orderDetails_id String
  variants        Variants @relation(fields: [variant_id], references: [id])
  variant_id      String
}

model Products {
  id                String              @id @default(uuid())
  name              String
  price             Float
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  active            Boolean             @default(true)
  brand             Brands              @relation(fields: [brand_id], references: [id])
  brand_id          String
  variants          Variants[]
  productCategories ProductCategories[]
  likes             Likes[]
}

model Brands {
  id       String     @id @default(uuid())
  name     String
  products Products[]
}

model Variants {
  id           String         @id @default(uuid())
  product      Products       @relation(fields: [product_id], references: [id])
  product_id   String
  file         Files?         @relation(fields: [file_id], references: [id])
  file_id      String
  size         Size           @default(NONE)
  textColor    TextColor      @default(NONE)
  rgb          String
  stock        Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orderDetails OrderDetails[]
  cartDetails  CartDetails[]
}

model Files {
  id       String     @id @default(uuid())
  key      String     @default(uuid())
  file_url String?
  variants Variants[]
}

model Categories {
  id                String              @id @default(uuid())
  name              String
  parentId          String?
  parent            Categories?         @relation("ParentCategory", fields: [parentId], references: [id])
  active            Boolean
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  productCategories ProductCategories[]

  Categories Categories[] @relation("ParentCategory")
}

model ProductCategories {
  products   Products   @relation(fields: [productId], references: [id])
  productId  String // relation scalar field (used in the `@relation` attribute above)
  categories Categories @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([productId, categoryId])
}

model Likes {
  products  Products @relation(fields: [productId], references: [id])
  productId String // relation scalar field (used in the `@relation` attribute above)
  user      Users    @relation(fields: [user_id], references: [id])
  user_id   String

  @@id([user_id, productId])
}

model CartDetails {
  id         String   @id @default(uuid())
  quantity   Int
  price      Float
  variants   Variants @relation(fields: [variant_id], references: [id])
  variant_id String
  cart       Carts    @relation(fields: [cart_id], references: [id])
  cart_id    String
}

model Carts {
  id          String        @id @default(uuid())
  user        Users         @relation(fields: [user_id], references: [id])
  user_id     String
  cartDetails CartDetails[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum Size {
  NONE
  SMALL
  MEDIUM
  LARGE
  X_LARGE
  XX_LARGE
  S4YEARS_XS
}

enum TextColor {
  NONE
  GREEN
  BLUE
  YELLOW
  PINK
  SKY_BLUE
  BROWN
  BLACK
  WHITE
  ORANGE
  PURPLE
}
